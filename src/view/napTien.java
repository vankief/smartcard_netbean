/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import connectDB.DataUserDAO;
import connectDB.DataUser;
import java.nio.ByteBuffer;
import java.security.PublicKey;
import java.util.Arrays;
import javacard.connect.ConnectCard;
import javacard.connect.RSAAppletHelper;
import javacard.utils.RSAData;
import javacard.utils.RandomUtil;
import javax.smartcardio.CardException;
import javax.swing.JOptionPane;
import jdk.nashorn.internal.parser.TokenType;

/**
 *
 * @author PC Nga
 */
public class napTien extends javax.swing.JFrame {

    private DataUserDAO dataUserDAO = new DataUserDAO();
    public DataUser dataUser;

    /**
     * Creates new form napTien
     */
    public napTien() {
        initComponents();
        initInformation();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        btn_xanNhan = new javax.swing.JButton();
        text_soDu = new javax.swing.JTextField();
        text_soTienNap = new javax.swing.JTextField();
        btn_huy = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_xanNhan.setBorderPainted(false);
        btn_xanNhan.setContentAreaFilled(false);
        btn_xanNhan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_xanNhanActionPerformed(evt);
            }
        });
        getContentPane().add(btn_xanNhan, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 410, 120, 50));

        text_soDu.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        text_soDu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_soDuActionPerformed(evt);
            }
        });
        getContentPane().add(text_soDu, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 190, 300, 50));

        text_soTienNap.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        getContentPane().add(text_soTienNap, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 270, 300, 50));

        btn_huy.setBorderPainted(false);
        btn_huy.setContentAreaFilled(false);
        btn_huy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_huyActionPerformed(evt);
            }
        });
        getContentPane().add(btn_huy, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 420, 110, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon("D:\\dev\\smartcard_netbean\\src\\doctorQ\\Nạp Tiền.png")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 510));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_xanNhanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_xanNhanActionPerformed

        String strSoDu = text_soDu.getText().trim();
        String strSoTienNap = text_soTienNap.getText().trim();
        int SoTienNap = Integer.parseInt(strSoTienNap);
        if (strSoTienNap.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập số tiền muốn nạp");
            return;
        }
        if (SoTienNap < 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập số tiền >0");
            return;
        }
        int balance = Integer.parseInt(strSoDu) + Integer.parseInt(strSoTienNap);
        ByteBuffer buffer = ByteBuffer.allocate(Integer.BYTES);
        buffer.putInt(balance);
        byte[] byteSoTienNap = buffer.array();
        byte[] data = new byte[byteSoTienNap.length + 1];
        //byteSoDu
        int offSet = 0;
        System.arraycopy(byteSoTienNap, 0, data, offSet, byteSoTienNap.length);
        offSet += byteSoTienNap.length;
        data[offSet] = (byte) 0x7E;
        if (rsaAuthentication()) {
            dataUser = new DataUser();
            dataUser.setBalance(balance);
            dataUser.setCardId(ConnectCard.getInstance().strID);
            boolean check = dataUserDAO.updateBalance(dataUser);
            if (check && ConnectCard.getInstance().TopUp(data)) {
                JOptionPane.showMessageDialog(null, "Nạp Tiền Thành Công");
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Lỗi Nạp Tiền");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Lỗi Xác Thực");
        }
    }//GEN-LAST:event_btn_xanNhanActionPerformed

    private void btn_huyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_huyActionPerformed

        this.dispose();
    }//GEN-LAST:event_btn_huyActionPerformed

    private void text_soDuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_soDuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_soDuActionPerformed
    private void initInformation() {
        if (ConnectCard.getInstance().ReadInformation()) {
            int SoDu = ConnectCard.getInstance().SoDu;
            text_soDu.setText(String.valueOf(SoDu));
            text_soDu.setEnabled(false);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(napTien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(napTien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(napTien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(napTien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new napTien().setVisible(true);

            }
        });
    }

    private boolean rsaAuthentication() {
        String maBn = ConnectCard.getInstance().strID;
        try {
            PublicKey publicKeys = dataUserDAO.getpublicKey(maBn);
            if (publicKeys == null) {
                return false;
            }
            System.out.println("publicKeys: " + Arrays.toString(publicKeys.getEncoded()));
            byte[] data = RandomUtil.randomData(20);

            byte[] signed = RSAAppletHelper.getInstance(
                    ConnectCard.getInstance().channel).requestSign(data);

            if (signed == null) {
                return false;
            }

            System.out.println("signed: " + Arrays.toString(signed));

            return RSAData.verify(publicKeys, signed, data);
        } catch (CardException ex) {
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_huy;
    private javax.swing.JButton btn_xanNhan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTextField text_soDu;
    private javax.swing.JTextField text_soTienNap;
    // End of variables declaration//GEN-END:variables
}

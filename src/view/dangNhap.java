/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import connectDB.DataUserDAO;
import java.awt.Color;
import java.security.PublicKey;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javacard.connect.ConnectCard;
import javacard.connect.RSAAppletHelper;
import javacard.utils.RSAData;
import javacard.utils.RandomUtil;
import javax.smartcardio.CardException;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;

/**
 *
 * @author PC Nga
 */
public class dangNhap extends javax.swing.JFrame {

    /**
     * Creates new form dangNhap
     */
    private int firstUSE;
    private static int login_status = 0;
    public DataUserDAO dAO = new DataUserDAO();

    public dangNhap() {
        initComponents();
        if (login_status == 0) {
            loginSetEnabled(false);
        } else {
            loginSetEnabled(true);
        }
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ckb_maPin = new javax.swing.JCheckBox();
        txt_pin1 = new javax.swing.JPasswordField();
        btn_dangnhap = new javax.swing.JButton();
        btn_xacnhan = new javax.swing.JButton();
        btn_ketNoiThe = new javax.swing.JButton();
        btn_adminForm = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1230, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ckb_maPin.setText("jCheckBox2");
        ckb_maPin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckb_maPinActionPerformed(evt);
            }
        });
        getContentPane().add(ckb_maPin, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 430, 20, 30));

        txt_pin1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txt_pin1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txt_pin1.setEnabled(false);
        txt_pin1.setFocusCycleRoot(true);
        getContentPane().add(txt_pin1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 370, 400, 40));

        btn_dangnhap.setBorderPainted(false);
        btn_dangnhap.setContentAreaFilled(false);
        btn_dangnhap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_dangnhapActionPerformed(evt);
            }
        });
        getContentPane().add(btn_dangnhap, new org.netbeans.lib.awtextra.AbsoluteConstraints(489, 275, 220, 50));

        btn_xacnhan.setBorderPainted(false);
        btn_xacnhan.setContentAreaFilled(false);
        btn_xacnhan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_xacnhanActionPerformed(evt);
            }
        });
        getContentPane().add(btn_xacnhan, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 490, 190, 60));

        btn_ketNoiThe.setBorderPainted(false);
        btn_ketNoiThe.setContentAreaFilled(false);
        btn_ketNoiThe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ketNoiTheActionPerformed(evt);
            }
        });
        getContentPane().add(btn_ketNoiThe, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 595, 720, 60));

        btn_adminForm.setBorderPainted(false);
        btn_adminForm.setContentAreaFilled(false);
        btn_adminForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_adminFormActionPerformed(evt);
            }
        });
        getContentPane().add(btn_adminForm, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 580, 170, 80));

        jLabel1.setBackground(new java.awt.Color(153, 255, 255));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/dangNhap.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 1210, 720));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 250, 770, 310));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_ketNoiTheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ketNoiTheActionPerformed
        String response = ConnectCard.getInstance().connectapplet();
        if (response.equals("Error")) {
            JOptionPane.showMessageDialog(null, "Kết nối bị lỗi");
        } else {
            if ((response.split("="))[1].equals("9000")) {
                loginSetEnabled(true);
                btn_ketNoiThe.setEnabled(false);
                firstUSE = (int) ((ConnectCard.getInstance().data)[0] & 0xFF);
               if (firstUSE == 0) {
                    if (rsaAuthentication()) {
                        ConnectCard.getInstance().setUp();
                        JOptionPane.showMessageDialog(null, "Kết nối thẻ thành công");
                    }else{
                        JOptionPane.showMessageDialog(null, "Thẻ không xác thực");
                    }
                }else{
                    ConnectCard.getInstance().setUp();
                    JOptionPane.showMessageDialog(null, "Kết nối thẻ thành công");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Kết nối bị lỗi");
            }
        }

    }//GEN-LAST:event_btn_ketNoiTheActionPerformed

    private void btn_adminFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_adminFormActionPerformed
        quanTriVien quanTriVien = null;
        try {
            quanTriVien = new quanTriVien();
        } catch (SQLException ex) {
            Logger.getLogger(dangNhap.class.getName()).log(Level.SEVERE, null, ex);
        }
        quanTriVien.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_adminFormActionPerformed

    private void btn_xacnhanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_xacnhanActionPerformed
        if (ConnectCard.getInstance().ReadInformation()){
            if (ConnectCard.getInstance().strID.trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Thẻ chưa được khởi tạo");
                return;
            }
        }else{
            JOptionPane.showMessageDialog(null, "Thẻ chưa được khởi tạo");
        }
        if (ConnectCard.getInstance().ReadInformation()) {
            boolean check = dAO.CheckCardBlocked(ConnectCard.getInstance().strID.trim());
            if (check) {
                System.out.println(check);
                    JOptionPane.showMessageDialog(null, "Thẻ đã bị khóa");
                    return;
            } 
                String pin = txt_pin1.getText();

                if (ConnectCard.getInstance().verifyPin(pin)) {
                    if (firstUSE == 1) {

                        doiMaPin doMaPin = new doiMaPin();
                        doMaPin.setVisible(true);
                        this.dispose();

                    } else {
                        nguoiDung home = new nguoiDung();
                        home.setVisible(true);
                        this.dispose();
                    }
                    login_status = 1;
                } else {
                    System.out.println("Mã pin sai");
                }     
        }
                
    }//GEN-LAST:event_btn_xacnhanActionPerformed

    private void btn_dangnhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_dangnhapActionPerformed

    }//GEN-LAST:event_btn_dangnhapActionPerformed

    private void ckb_maPinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckb_maPinActionPerformed
        if (ckb_maPin.isSelected()) {
            txt_pin1.setEchoChar((char) 0);
        } else {
            txt_pin1.setEchoChar('*');
        }
    }//GEN-LAST:event_ckb_maPinActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dangNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dangNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dangNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dangNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dangNhap().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_adminForm;
    private javax.swing.JButton btn_dangnhap;
    private javax.swing.JButton btn_ketNoiThe;
    private javax.swing.JButton btn_xacnhan;
    private javax.swing.JCheckBox ckb_maPin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField txt_pin1;
    // End of variables declaration//GEN-END:variables
private void loginSetEnabled(boolean b) {
        if (b) {
            txt_pin1.setBackground(Color.white);
            ckb_maPin.setBackground(Color.white);
        } else {
            txt_pin1.setBackground(Color.decode("#d7d7d7"));
            ckb_maPin.setBackground(Color.decode("#d7d7d7"));
        }
        txt_pin1.setEnabled(b);
        ckb_maPin.setEnabled(b);
        btn_xacnhan.setEnabled(b);
    }

    private boolean rsaAuthentication() {
        try {
            PublicKey publicKeys = RSAData.getPublicKey();
            if (publicKeys == null) {
                return false;
            }
            System.out.println("publicKeys: " + Arrays.toString(publicKeys.getEncoded()));
            byte[] data = RandomUtil.randomData(20);

            byte[] signed = RSAAppletHelper.getInstance(
                    ConnectCard.getInstance().channel).requestSign(data);

            if (signed == null) {
                return false;
            }

            System.out.println("signed: " + Arrays.toString(signed));

            return RSAData.verify(publicKeys, signed, data);
        } catch (CardException ex) {
        }
        return false;
    }
}
